### **BullBot: Comprehensive Breakdown and Explanation**

---

### **Purpose and Goal of BullBot**

**BullBot** is a stock market prediction system designed to identify **short-term spikes** in stock prices. The system achieves this by:
1. **Training a machine learning model** on historical stock data to recognize patterns leading to price spikes.
2. **Simulating live trading conditions** by analyzing rolling windows of data day-by-day and predicting potential spikes based on learned patterns.
3. Providing **actionable insights** for real-time stock analysis, where the system "raises its hand" to indicate a detected pattern predicting a significant price jump.

The core functionality is centered around understanding and predicting **price behaviors** through machine learning and predefined thresholds.

---

### **System Overview**

#### **System Specifications**
- **OS**: Ubuntu (running on WSL2 in Windows).
- **File System**: Project resides in `/mnt/e/projects/BullBot`.
- **Environment**: Python 3.10 in a virtual environment (`BullBot_env`).
- **Key Libraries**:
  - `numpy`, `pandas`: Data processing and manipulation.
  - `scikit-learn`: Model training and evaluation.
  - `joblib`: Model serialization and loading.
  - `openpyxl`: For earlier `.xlsx` file handling.
  - Other dependencies in `requirements.txt`.

#### **Key Functionalities**
1. **Data Cleaning and Preprocessing**:
   - Cleans raw stock data, removes NaNs, and standardizes for analysis.
   - Identifies "spike" and "non-spike" behaviors based on predefined thresholds.

2. **Machine Learning Pipeline**:
   - **Training**: Model learns patterns of price spikes and non-spike scenarios.
   - **Validation**: Model performance is evaluated on a separate dataset.
   - **Testing**: Model is tested on unseen data to simulate real-world conditions.

3. **Live Testing**:
   - Analyzes day-by-day rolling windows of stock data to simulate live predictions.

---

### **BullBot Directory Structure**
```
/mnt/e/projects/BullBot/
├── data/
│   ├── raw/                             # Raw stock data (CSV files).
│   ├── preprocessed/                    # Cleaned and filtered stock data.
│   ├── behaviors/                       # Behavior-specific data.
│   │   ├── Short_Spike/
│   │   │   ├── Instances/               # Spike behavior data.
│   │   │   └── Non_Instances/           # Non-spike behavior data.
│   ├── features/                        # Placeholder for derived feature data.
├── models/
│   ├── Short_Spike/                     # Models and results for short spikes.
│   │   ├── trained/                     # Trained model files (.pkl).
│   │   ├── validated/                   # Validation results (.json).
│   │   └── tested/                      # Testing results (.json).
├── src/
│   ├── preprocessing/
│   │   ├── data_preprocess.py           # Cleans raw data.
│   │   ├── short_spike_preprocessing.py # Processes short spike instances.
│   │   └── (other behavior preprocessors for future use).
│   ├── training/
│   │   ├── short_spike_training.py      # Trains the short spike model.
│   ├── validation/
│   │   ├── short_spike_validation.py    # Validates the short spike model.
│   ├── testing/
│   │   ├── short_spike_test.py          # Tests the model on unseen data.
│   │   ├── short_spike_live_test.py     # Simulates live predictions.
├── requirements.txt                     # Python dependencies.
```

---

### **Python Scripts and Functions**

#### **Preprocessing Scripts**
1. **`data_preprocess.py`**:
   - Cleans raw stock data by:
     - Removing NaNs.
     - Filtering rows based on date ranges.
   - Saves the cleaned data to `/data/preprocessed`.

2. **`short_spike_preprocessing.py`**:
   - Identifies **short spikes** (≥70% price increase over 7 days).
   - Generates:
     - 180-day windows of **spike data** saved in `/Instances`.
     - 180-day windows of **non-spike data** saved in `/Non_Instances`.
   - Ensures no overlap between instances or non-instances.
   - Caps global and per-stock instances to balance the dataset.

---

#### **Training and Validation Scripts**
1. **`short_spike_training.py`**:
   - **Purpose**: Train a Random Forest Classifier on short spike data.
   - **Inputs**: Spike and non-spike data from `/Instances` and `/Non_Instances`.
   - **Output**: Saves a trained model to `/models/Short_Spike/trained`.

2. **`short_spike_validation.py`**:
   - **Purpose**: Evaluate the trained model on unseen validation data.
   - **Outputs**:
     - Accuracy, confusion matrix, and classification report.
     - Saves validation metrics in `/validated`.

---

#### **Testing Scripts**
1. **`short_spike_test.py`**:
   - **Purpose**: Test the trained model on a held-out dataset.
   - **Outputs**:
     - Detailed evaluation metrics (saved in `/tested`).

2. **`short_spike_live_test.py`**:
   - **Purpose**: Simulate live predictions with rolling 180-day windows.
   - **How it works**:
     - Starts with the first 180 days.
     - Analyzes this window for a short spike.
     - Rolls forward by one day, adding new data and dropping the oldest.

---

### **Data Flow**
1. **Raw Data**:
   - Located in `/data/raw`.
   - Includes stock price data with features like `Date`, `Close`, and `Volume`.

2. **Preprocessed Data**:
   - Cleaned via `data_preprocess.py`.
   - Filtered by date range (e.g., training: 2000–2017, testing: 2018–2019).

3. **Behavior Data**:
   - Processed via `short_spike_preprocessing.py`.
   - Categorized into `Instances/` and `Non_Instances/`.

4. **Model Training**:
   - Uses spike and non-spike data to train a classifier.
   - Trained model saved in `/models/Short_Spike/trained`.

5. **Live Testing**:
   - Uses rolling windows of preprocessed data to simulate real-time predictions.

---

### **System Flow**
1. **Preprocessing**:
   - Clean raw data → Generate spike and non-spike datasets.

2. **Model Training**:
   - Train on preprocessed spike data → Save trained model.

3. **Validation and Testing**:
   - Validate model on unseen datasets → Save metrics.
   - Test model to simulate its accuracy in real-world conditions.

4. **Live Testing**:
   - Simulate predictions day-by-day on unseen data.

---

### **Challenges and Enhancements**
#### **Challenges**:
1. Model predicts spikes too frequently.
2. Single feature (`Close`) may not capture complex patterns.

#### **Planned Enhancements**:
1. Incorporate `Volume` and moving averages into features.
2. Adjust spike detection thresholds for better precision.

---

### **End Goal**
- Create a reliable system that:
  - Detects actionable short spikes in real time.
  - Balances accuracy with minimal false positives.
  - Offers expandability for additional stock behaviors.

This encapsulates the entire BullBot system, its structure, and its operational flow. It ensures the next steps are clear and well-informed. Let me know if further clarifications are needed!